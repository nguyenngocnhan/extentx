lift = new LiftState file:yes


#compile = coffeekup.compile

html ->
    head ->
        script src:"/js/lift/#{@lift.filename}" # /js/lift/ofkpweofk.js # some random number
    body ->
        @lift 'lol', compile ->
            div ->
                text "data:#{@data.value}"


when file==true then every lifted part will be concated first and hashed .. this hashed parted will be hached in a longtime chache (cache = {hash:part})
then the random number will be linked to the part-hash and saved in a shorttime cache

when the client reads the html he will see the script tag to the random number javascript file he will request it and lift will look up the random number in the shorttime cache and put out the lifted part from the longtime cache




class Project extends ExposeModel

    fetch: ????


class Projects extends ExposeController

    show: (req, res, next) =>
        @lift = new LiftState expose:this
        { project_id, user_id } = req.params
        @lift 'show', project_id, user_id, (project_id, user_id) ->
            Project.fetch user_id, project_id, (project) ->
                @render 'project', project

    render: ????



template muss auch async sein (coffeekup mit node-xml)

mit asnyc template geht dann auch das man teile definiert die erst wenn daten da sind ausgerechnet werden.



